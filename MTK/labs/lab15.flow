import ds/tree;
import runtime;
import lingo/pegcode/driver;

gram = "#include C:\f\labs\lab15.lingo";

Expression ::= Sum, Div, Sub, Mul, Int, Variable, Powah, Comparison, Element;
Sum(x: Expression, y: Expression);
Div(x: Expression, y: Expression);
Sub(x: Expression, y: Expression);
Mul(x: Expression, y: Expression);
Powah(e: Expression, p: int);
Variable(name: string);
Int(n: int);
Comparison(operation : string, l : Expression, r : Expression);
Element(name: string, index: Expression);

Assigned ::= Variable, Element;

VarValues ::= Int, Array;
Array(a : Tree<int, Int>); 

VarType ::= VarInt, VarArr;
VarInt();
VarArr();

Label(l : int);
State(label : Label, vars : Tree<string, VarValues>);

Command ::= Assign, AssignArr, Jamp, Condition, Print;
Assign(var : Assigned, e : Expression, goto : [Label]);
AssignArr(name : string, arr : [Int], goto : [Label]);
Jamp(goto : [Label]);
Condition(bool_exp : Comparison, t : [Label], f : [Label]);
Print(e : Expression, goto : [Label]);

Declaration(name : string, type : VarType);
Instruction(label : Label, command : Command);
Tree_instruct(t : Tree<Label, Command>);
Program(decls : [Declaration], instrs : [Instruction]);

ToProgram(str : string) -> Program {
	parsic(compilePegGrammar(gram), str, defaultPegActions);
}

Labels2str(goto : [Label]) -> string {
	m = fold(goto, [], \acc, val -> {
		concat(acc, [val.l]);
	});
	strGlue(map(m, i2s), ", ");
}

Exp2str(exp: Expression) -> string {
  switch(exp) {
    Sum(l, r): { "(" + strGlue([Exp2str(l), "+", Exp2str(r)], " ") + ")"; }
    Sub(l, r): { "(" + strGlue([Exp2str(l), "-", Exp2str(r)], " ") + ")"; }
    Mul(l, r): { "(" + strGlue([Exp2str(l), "*", Exp2str(r)], " ") + ")"; }
    Div(l, r): { "(" + strGlue([Exp2str(l), "/", Exp2str(r)], " ") + ")"; }
    Powah(e, p): {"(" + strGlue([Exp2str(e), "^", i2s(p)], " ") + ")"; }
    Variable(name): { name; }
    Int(n): { i2s(n); }
	Element(name, index): { "(" + strGlue([name, "[", Exp2str(index), "]"], " ") + ")"; }
	Comparison(operation, l, r): {"(" + Exp2str(l) + " "  + operation + " " + Exp2str(r) + ")";}
  }
}

Command2str(command : Command) -> string {
	switch(command)	{
		Assign(var, e, goto): {	Exp2str(var) + " := " + Exp2str(e) + " goto { "+ Labels2str(goto) + " }"; }
		AssignArr(name, arr, goto): {	name + " := [ ... ] " + " goto { "+ Labels2str(goto) + " }"; }
		Jamp(goto): { "goto { " + Labels2str(goto) + " }"; }
		Condition(bool_exp, t, f): { "if (" + Exp2str(bool_exp) + ") then { " + Labels2str(t) + " } else {" + Labels2str(f) + " }";	}
		Print(e, goto): { "print (" + Exp2str(e) + ") goto { " + Labels2str(goto) + " }"; }
	}
}

PrintProgram(prog: Program) {
	fori(0, length(prog.decls)-1, (\i -> {
	 	println("var " + prog.decls[i].name + " : int;");	
	}));
  	fori(0, length(prog.instrs)-1, (\i -> {
		println (i2s(prog.instrs[i].label.l) + ": " + Command2str(prog.instrs[i].command));
	}));
}

Init_vars(decls : [Declaration]) -> Tree<string, VarValues> {
	fold(decls, makeTree(), \acc, v -> {
		switch(v.type) {
			VarInt(): setTree(acc, v.name, Int(0));
			VarArr(): setTree(acc, v.name, Array(makeTree()));
		}
	});
}

Init_tree(instrs : [Instruction]) -> Tree<Label, Command> {
	fold(instrs, makeTree(), \acc, v -> {
		setTree(acc, v.label, v.command);
	});
}

Get_states(goto : [Label], vars : Tree<string, VarValues>) -> [State] {
	fold(goto, [], \acc, val -> {
		concat(acc, [State(val, vars)]);
	});
}

Calculate(exp: Expression, vars : Tree<string, VarValues>) -> int {
  switch(exp) {
    Sum(l, r): { Calculate(l, vars) + Calculate(r, vars); }
    Sub(l, r): { Calculate(l, vars) - Calculate(r, vars); }
    Mul(l, r): { Calculate(l, vars) * Calculate(r, vars); }
    Div(l, r): { 
      assert(Calculate(r, vars) != 0, "Error: division by zero in integer calculator.\n");
      Calculate(l, vars) / Calculate(r, vars); 
    }
    Powah(e, p): { 
      assert(p >= 0, "Error: negative exponent in integer calculator.\n");
      pow(Calculate(e, vars), p); 
    }
	Comparison(operation, l, r): {
		l1 = Calculate(l, vars);
		r1 = Calculate(r, vars);
		if (operation == "==" && l1 == r1) { 1; }
		else if (operation == "!=" && l1 != r1) { 1; }
		else if (operation == ">=" && l1 >= r1) { 1; }
		else if (operation == "<=" && l1 <= r1) { 1; }
		else if (operation == ">" && l1 > r1) { 1; }
		else if (operation == "<" && l1 < r1) { 1; }
		else { 0; }
		}
	Variable(name): { 
		switch (lookupTree(vars, name)) {
			Some(res): { 
				switch(res) {
					Int(n): { n;}
					Array(a): { assert(false, "Error: variable expected but array received.\n"); 0;}
				} 
			} 
			None(): { assert(false, "Error: value of variable is not found.\n"); 0; }
		} 
	}
	Element(name, index): {
		switch (lookupTree(vars, name)) {
			Some(res): { 
				switch(res) {
					Int(n): { assert(false, "Error: array expected but variable received. Cannot get value by index.\n"); 0; }
					Array(a): {
						index1 = Calculate(index, vars);
						switch (lookupTree(a, index1)) {
							Some(res1): { res1.n; }
							None(): { assert(false, "Error: value of element is not found.\n"); 0; }
						}
					} 
				}
			} 
			None(): { assert(false, "Error: array is not found.\n"); 0; }
		}
	}
    Int(n): { n; }
  }
}

Execute_command(state : State, tr_in : Tree_instruct) -> [State] {
	switch (lookupTree(tr_in.t, state.label)) {
		None() : { []; }
		Some(res) : {
			switch (res) {
			Assign(var, e, goto): {
				switch (var) {
					Variable(name): {
						e1 = Calculate(e, state.vars);
						vars = setTree(state.vars, var.name, Int(e1));
						Get_states(goto, vars);
					}
					Element(name, index): {
						switch (lookupTree(state.vars, name)) {
							Some(res1): {
							switch (res1) {
								Array(a): { 
									index1 = Calculate(index, state.vars);
									e1 = Calculate(e, state.vars);
									array = removeFromTree(res1.a, index1);
									newArray = setTree(array, index1, Int(e1));
									vars0 = removeFromTree(state.vars, name);
									vars = setTree(vars0, name, Array(newArray));
									Get_states(goto, vars);
								}
								Int(n): { assert(false, "Error: array expected but variable received. \n"); Get_states(goto, state.vars); }
							}
							}
							None(): { assert(false, "Error: array is not found.\n"); Get_states(goto, state.vars); }
						}
					}
				}
			}
			AssignArr(name, arr, goto): {
				switch (lookupTree(state.vars, name)) {
					Some(res1): {
						switch (res1) {
							Array(a): { 
								vars0 = removeFromTree(state.vars, name);
								newArray = foldi(arr, makeTree(), \index, acc, v -> {
									 setTree(acc, index, v);
								});								
								vars = setTree(vars0, name, Array(newArray));
								Get_states(goto, vars);
							}
							Int(n): { assert(false, "Error: impossible to assign multiple values to a variable.\n"); Get_states(goto, state.vars); }
						}
					}
					None(): { assert(false, "Error: array is not found.\n"); Get_states(goto, state.vars); }
				}

			}
			Jamp(goto): { 
				Get_states(goto, state.vars); 
			}
			Condition(bool_exp, t, f): {
				if(Calculate(bool_exp, state.vars) == 1) {
					Get_states(t, state.vars);
				}
				else {
					Get_states(f, state.vars);
				}
			}
			Print(e, goto): {
				n = Calculate(e, state.vars);
				println(i2s(n));
				Get_states(goto, state.vars);
			}
			}	
		}	
	}
}

Execute_program(S0 : State,  tr_in : Tree_instruct) -> [State] {
	for([S0], \state -> length(state) > 0, \prev -> {
		fold(prev, [], \acc, state -> {
			concat(acc, Execute_command(state, tr_in));
		});
	});
}

checkExp(exp: Expression, vars : Tree<string, VarValues>) -> bool{
  switch(exp) {
    Sum(l, r): { checkExp(l, vars) && checkExp(r, vars); }
    Sub(l, r): { checkExp(l, vars) && checkExp(r, vars); }
    Mul(l, r): { checkExp(l, vars) && checkExp(r, vars); }
    Div(l, r): { checkExp(l, vars) && checkExp(r, vars); }
    Powah(e, p): { checkExp(e, vars); }
	Comparison(operation, l, r): { checkExp(l, vars) && checkExp(r, vars); }
	Variable(name): { 
		switch (lookupTree(vars, name)) {
			 Some(res): {
				switch(res){
					Int(n): { true; } 
					Array(a): {false; }
				}
			 }
			None(): { false; }
		} 
	}
	Element(name, index): {
		switch (lookupTree(vars, name)) {
			Some(res): {
				switch(res){
					Int(n): { false; } 
					Array(a): {true; }
				}
			}
			None(): { false; }
		} 
	 }
    Int(n): { true; }
  }
}
checkProgram(instrs : [Instruction], vars : Tree<string, VarValues>) -> bool{
  	fold(instrs, true, \acc, line -> {
			switch (line.command) {
			Assign(var, e, goto): { acc && checkExp(var, vars) && checkExp(e, vars); }
			AssignArr(name, arr, goto): { acc && checkExp(Element(name, Int(0)), vars); }
			Jamp(goto): { acc && true; }
			Condition(bool_exp, t, f): { acc && checkExp(bool_exp, vars); }
			Print(e, goto): { acc && checkExp(e, vars); }
			}
	});
}

main() {
	prog = ToProgram("
	 	var x : [int];
	 	var y : int;
		0: x := [10, 15] goto {1};
		1: y :=  (x[0]) goto {3};
		3: y:= ( ( y * (x[1]) ) + 5)  goto {5};
		5: print ( ((x[0]) + y) ) goto {10};

	");

	vars = Init_vars(prog.decls);
	if (checkProgram(prog.instrs, vars)) {
		S0 = State(Label(0), vars);
	 	tr_in = Tree_instruct(Init_tree(prog.instrs));
	 	Execute_program(S0, tr_in); 
	 	println("The End.\n");
	}
	
	println("Program code:");
	PrintProgram(prog);
	
}


	// prog = ToProgram("
	// 	var x : int;
	// 	var y : int;
	// 	0: x := 10 goto {1 2};
	// 	1: y := 20 goto {3 6};
	// 	2: print(x) goto {};
    //     3: print(y) goto {25};
    //     15: print((x + y)) goto {};
	// 	5: if (x == 10) then {15} else {};
	// 	6: goto {5};
	// ");


	// prog = ToProgram("
	//  	var x : int;
	//  	var y : int;
	// 	0: x := 10 goto {1};
	// 	1: y := 15 goto {2};
	// 	2: goto {3 8};
	// 	3: goto {4 6};
	// 	4: if (x > y) then {5} else {};
	// 	5: x := (x - y) goto {2};
	// 	6: if (x < y) then {7} else {};
	// 	7: y := (y - x) goto {2};
	// 	8: if (x == y) then {9} else {};
	// 	9: print(x) goto {};
	// ")
