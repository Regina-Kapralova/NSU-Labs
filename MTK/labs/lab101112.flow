import lingo/pegcode/driver;

gram = "#include C:\f\labs\lab9.lingo";

Expression ::= Sum, Div, Sub, Mul, Int, Perem, Powah, Drob;
Sum(x: Expression, y: Expression);
Div(x: Expression, y: Expression);
Sub(x: Expression, y: Expression);
Mul(x: Expression, y: Expression);
Powah(e: Expression, p: int);
Drob(x: int, y: int);
Perem(name: string);
Int(n: int);

totree(str: string) -> Expression {
  parsic(compilePegGrammar(gram), str, defaultPegActions)
}

toline(exp: Expression) -> string {
  switch(exp) {
    Sum(l, r): { "(" + strGlue([toline(l), "+", toline(r)], " ") + ")"; }
    Sub(l, r): { "(" + strGlue([toline(l), "-", toline(r)], " ") + ")"; }
    Mul(l, r): { "(" + strGlue([toline(l), "*", toline(r)], " ") + ")"; }
    Div(l, r): { "(" + strGlue([toline(l), "/", toline(r)], " ") + ")"; }
    Powah(e, p): {"(" + strGlue([toline(e), "^", i2s(p)], " ") + ")"; }
    Drob(x, y): { "(" + strGlue([i2s(x), "/", i2s(y)], " ") + ")"; }
    Perem(name): { name; }
    Int(n): { i2s(n); }
  }
}

diff(exp: Expression, per: string) -> Expression {
  switch(exp) {
    Sum(l, r): { Sum(diff(l,per), diff(r, per)); }
    Sub(l, r): { Sub(diff(l, per), diff(r, per)); }
    Mul(l, r): { Sum(Mul(diff(l, per), r), Mul(l, diff(r, per))); }
    Div(l, r): { Div(Sub(Mul(diff(l, per), r), Mul(l, diff(r, per))), Powah(r, 2)); }
    Powah(e, p): { Mul(diff(e, per), Mul(Int(p), Powah(e, (p-1)))); }
    Drob(x, y): { Int(0); }
    Perem(name): { if (name == per) Int(1) else Int(0); }
    Int(n): { Int(0); }
  }
}

isInt (exp: Expression) -> bool {
  switch(exp) {
    Int(n): { true; }
    default: { false; }
  }
} 

simpler(exp: Expression) -> Expression {
  switch(exp) {
    Sum(l, r): { l1 = simpler(l); r1 = simpler(r);
      if (isInt(l1) == true && isInt(r1) == true) Int(icalc(Sum(l1, r1), [], []))
      else if (isInt(l1) == true && icalc(l1, [], []) == 0 ) { r1; }
      else if (isInt(r1) == true && icalc(r1, [], []) == 0) { l1; }
      else { Sum(l1, r1); } 
    }
    Sub(l, r): { l1 = simpler(l); r1 = simpler(r);
      if (isInt(l1) == true && isInt(r1) == true) Int(icalc(Sub(l1, r1), [], []))
      else if (isInt(r1) == true && icalc(r1, [], []) == 0) { l1; }
      else { Sub(l1, r1); }
    }
    Mul(l, r): { l1 = simpler(l); r1 = simpler(r);
      if (isInt(l1) == true && isInt(r1) == true) Int(icalc(Mul(l1, r1), [], []))
      else if (isInt(l1) == true && icalc(l1, [], []) == 1 ) { r1; }
      else if (isInt(r1) == true && icalc(r1, [], []) == 1) { l1; }
      else if (isInt(l1) == true && icalc(l1, [], []) == 0 ) { Int(0); }
      else if (isInt(r1) == true && icalc(r1, [], []) == 0 ) { Int(0); }
      else { Mul(l1, r1); }
    }
    Div(l, r): { l1 = simpler(l); r1 = simpler(r);
      if (isInt(l1) == true && isInt(r1) == true) Int(icalc(Div(l1, r1), [], []))
      else if (isInt(r1) == true && icalc(r1, [], []) == 1) { l1; }
      else if (isInt(l1) == true && icalc(l1, [], []) == 0 ) { Int(0); }
      else { Div(l1, r1); }
    }
    Powah(e, p): { e1 = simpler(e);
      if (isInt(e1) == true) Int(icalc(Powah(e1, p), [], []))
      else if (p == 1) { e1; }
      else if (p == 0) { Int(1); }
      else { Powah(e1, p); }
    }
    default: { exp; }
  }
}

value (name: string, names: [string], values: [int]) -> int {
  result : ref int = ref 0;
  fori(0, length(names)-1, (\i -> {
	 		if (names[i] == name) {
				 result := i;
			}	
	 	}))
  assert(names[^result] == name, "Error: value of variable is not found.\n");
  values[^result];
}

icalc(exp: Expression, names: [string], values: [int]) -> int {
  switch(exp) {
    Sum(l, r): { icalc(l, names, values) + icalc(r, names, values); }
    Sub(l, r): { icalc(l, names, values) - icalc(r, names, values); }
    Mul(l, r): { icalc(l, names, values) * icalc(r, names, values); }
    Div(l, r): { 
      assert(icalc(r, names, values) != 0, "Error: division by zero in integer calculator.\n");
      icalc(l, names, values) / icalc(r, names, values); 
    }
    Powah(e, p): { 
      assert(p >= 0, "Error: negative exponent in integer calculator.\n");
      pow(icalc(e, names, values), p); 
    }
    Drob(x, y): { x / y; }
    Perem(name): { value(name, names, values); }
    Int(n): { n; }
  }
}

NOD(x: int, y: int) -> int {
    if (y == 0) { x; } 
    else { NOD(y, x % y); }
}
reduse(d: Drob) -> Drob {
    Drob(d.x / NOD(d.x, d.y), d.y / NOD(d.x, d.y));
}

dcalc(exp: Expression, names: [string], values: [int]) -> Drob {
    switch(exp) {
        Sum(l, r): {
            d1 = dcalc(l, names, values);
            d2 = dcalc(r, names, values);
            reduse(Drob(d1.x*d2.y + d2.x*d1.y, d1.y*d2.y));
        }
        Sub(l, r): {
            d1 = dcalc(l, names, values);
            d2 = dcalc(r, names, values);
            reduse(Drob(d1.x*d2.y - d2.x*d1.y, d1.y*d2.y ));
        } 
        Mul(l, r): {
            d1 = dcalc(l, names, values);
            d2 = dcalc(r, names, values);
            reduse(Drob(d1.x * d2.x, d1.y * d2.y));
        }
        Div(l, r): {
            d1 = dcalc(l, names, values);
            d2 = dcalc(r, names, values);
            assert(d2 != Drob(0, 1), "Error: division by zero in drob calculator.\n");
            reduse(Drob(d1.x * d2.y, d1.y * d2.x));
        }
        Powah(e, p): {
            e1 = dcalc(e, names, values);
            reduse(Drob(pow(e1.x, p), pow(e1.y, p)));
        }
        Drob(x, y): { reduse(Drob(x, y)); }
        Perem(name): { Drob(value(name, names, values), 1); }
        Int(n): { Drob(n, 1); }
    }
}

main() {
  // it = totree("(2 / 0)");
  // println(toline(it));
  // println(it);
  // println(icalc(it, ["y", "x"], [5, 1]));
  // println(" ");

  // dt = totree("((1 + z) / 5)");
  // println(toline(dt));
  // println(dt);
  // println(dcalc(dt, ["y", "x"], [5, 2]));

  it = totree("((2 + x) * (((2 * x) + 1) ^ 2))");
  println(toline(it));
  println(it);
  println(" ");
  println(simpler(it));
  println(" ");
  println(diff(it, "x"));
  println(toline(simpler(diff(it, "x"))));


  quit(0);
}